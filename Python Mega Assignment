## Assignment Part-1

Q1. Why do we call Python as a general purpose and high-level programming language?
Q1. Ans -
1 - Python is a general-purpose language,
which means it's designed to be used in a range of applications,
including data science, software and web development, automation,
and generally getting stuff done.
2 - Python is an high-level programming language. 
high-level means it's easy for humans to understand.

2 Python is an object-oriented, high-level programming language. 
Object-oriented means this language is based around objects (such as data) rather than functions,
and high-level means it's easy for humans to understand


Q2. Why is Python called a dynamically typed language?
Q2. Ans - Python is called a dynamically typed language because,
Dynamic typing means that the type of the variable is determined only during runtime.


Q3. List some pros and cons of Python programming language?
Q3. Ans - | The pros of Python programming language |
* Python is easy to learn and read
* Python enhances productivity
* Python has a vast collection of libraries
* Python is free, open-source, and has a vibrant community
* Python is a portable programming language

         | The cons of python programming language |
* Python has speed limitations
* Python is not so strong with mobile computing
* Python can have runtime errors
* Python consumes a lot of memory space
* Python is not easy to test


Q4. In what all domains can we use Python?
Q4. Ans - There are domains which we can use python are as follows.
1 - Machine Learning / Artificial intelligence
2 - Desktop GUI
3 - Data Analytics & Data Visualization
4 - Web Development
5 - Game Development

Q5. What are variable and how can we declare them?
Q5. Ans - Declaration of Variables. Variables are the basic unit of storage in a programming language. 
These variables consist of a data type, the variable name, and the value to be assigned to the variable. 
Unless and until the variables are declared and initialized, they cannot be used in the program.


Q6. How can we take an input from the user in Python?
Q6. Ans - #supposed you had take an input - "karan"
username = input("Enter username - ")
print("Username is - " + username)
output - Username is - karan


Q7. What is the default datatype of the value that has been taken as an input using input() function?
Q7. Ans - By default, input returns a string. So the name and age will be stored as strings.

Q8. What is type casting?
Q8. Ans - Type Casting is the method to convert the variable data type into a certain data type in order to the operation required to be performed by users.

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?
Q9. Ans - yes, we take more than one input from the user using single input() function
#supposed the input is "karan singh rajpurohit" and it will split the value into three parts.
a, b, c = input("Enter three values: ").split()  
print("Enter Your First Name: ", a)  
print("Enter Your Last Name: ", b)  
print("Enter Your Class: ", c)  
print(a, b, c)  

output - 
Enter three values: karan singh rajpurohit
Enter Your First Name:  karan
Enter Your Last Name:  singh
Enter Your Class:  rajpurohit
karan singh rajpurohit

Q10. What are keywords?
Q10. Ans - Python keywords are special reserved words that have specific meanings and purposes and can't be used for anything but those specific purposes. 
These keywords are always available—you'll never have to import them into your code. Python keywords are different from Python's built-in functions and types.
and the keywords are -
False	await	else	import	pass
None	break	except	in	raise
True	class	finally	is	return
and	continue	for	lambda	try
as	def	from	nonlocal	while
assert	del	global	not	with
async	elif	if	or	yield

Q11. Can we use keywords as a variable? Support your answer with reason.
Q11. Ans - We cannot use a keyword as a variable name, function name, or any other identifier.
They are used to define the syntax and structure of the Python language.
All the keywords except True , False and None are in lowercase and they must be written as they are.
The list of all the keywords is given in Q-NO. - 10

Q12. What is indentation? What's the use of indentaion in Python?
Q12. Ans - Indentation refers to the spaces at the beginning of a code line.
Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.
Python uses indentation to indicate a block of code.

Q13. How can we throw some output in Python?
Q13. Ans - name = "karan"
           print(name)
output - karan    
    
           
Q14. What are operators in Python?
Q14. Ans - in python, operators are speacial symbols that designate that some sort of computation should be performed.
           the value that an operator acts on are called oprands.
           
        >>>a = 10
        >>>b = 20
        >>>a + b - 5
           25
           

Q15. What is difference between / and // operators?
Q15. Ans - '/' is the division operator.
           '//' is the floor division operator.
          
           for eg:
           
in this code we are getting 5 because after division it not has any value in points:           
           x = 15
           y = 3
print(x / y)   #This prints output as 5
print(x // y)  #This prints output as 5


in this code we gets remaining value in points because we are doing simple division, if we use (//) then we'll not get float value, we only gets int value.
a = 19
b = 4
print(a // b)  #This prints output as 4
print(a / b)  #This prints output as 4.75

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
```
Q16. Ans - the ways we can print iNeuroniNeuroniNeuroniNeuron as an output are as follows:
1)-      ineuron = ("iNeuroniNeuroniNeuroniNeuron")
         print(ineuron)
output - iNeuroniNeuroniNeuroniNeuron

2)-      ineuron = ("iNeuron"*4)
         print(ineuron)
output - iNeuroniNeuroniNeuroniNeuron

3)- ineuron = ("iNeuron")
    print(ineuron*4)
    output - iNeuroniNeuroniNeuroniNeuron


Q17. Write a code to take a number as an input from the user and check if the number is odd or even.
Q17. Ans -
numbers = int(input("please enter a number to check it's a even number or odd number. "))
if numbers%2==0:
    print("the number",numbers,"which you have entered is a even number.")
elif numbers%2!=0:
    print("the number",numbers,"which you have entered is a odd number.")
    
#(optional):
numbers = int(input("please enter a number to check it's a even number or odd number. "))
if numbers%2==0:
    print("the number",numbers,"which you have entered is a even number.")
else:
    print("the number",numbers,"which you have entered is a odd number.")


Q18. What are boolean operator?
Q18. Ans - The logical operators and, or and not are also referred to as boolean operators.
While and as well as or operator needs two operands, which may evaluate to true or false, not operator needs one operand evaluating to true or false.

Boolean and operator returns true if both operands return true.
for eg:

1):                                                             3):
a = 50                                                          name = "KARAN"
b = 100                                                         print(name.islower())
a>b                                                             
output = false                                                  output = False       
#you'll get false because a is not greater than b               #you'll get False because the value is name is not lower form

2):                                                             4):
a = 50                                                          name = "KARAN"
b = 100                                                         print(name.isupper())
a<b                                                             
output = true                                                   output = True
#you'll get true because a is greater than b                     #you'll get True because the value is name is not lower form



Q19. What will the output of the following?
```
1 or 0

0 and 0

True and False and True

1 or 0 or 0
```
Q19. Ans - 
output:
1
0
False
1


Q20. What are conditional statements in Python?
Q20. Ans - Like every other programming language, Python also has some predefined conditional statements.
A conditional statement as the name suggests itself, is used to handle conditions in your program.
These statements guide the program while making decisions based on the conditions encountered by the program.

Python has 3 key Conditional Statements that you should know:

if statement
if-else statement
if-elif-else ladder

Q21. What is use of 'if', 'elif' and 'else' keywords?
Q21. Ans - if… elif…else are conditional statements that provide you with the decision making that is required when you want to execute code based on a particular condition.
The if… elif…else statement used in Python helps automate that decision making process.

Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
Q22. Ans -
age = int(input("please enter your age "))
if age >= 18:
print("I can vote")
if age < 18:
print("I can't vote")

#(optional):
age = int(input("please enter your age "))
if age >= 18:
print("I can vote")
else:
print("I can't vote")


Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
Q23. Ans - 
numbers = [12, 75, 150, 180, 145, 525, 50]
for i in numbers:
    if i%2==0:
        print(i,"the number is a even number ")

output:
12 the number is a even number 
150 the number is a even number 
180 the number is a even number 
50 the number is a even number
        
#(optional)
#if we also want to display whether the numbers list have odd numbers as well as with even numbers.

numbers = [12, 75, 150, 180, 145, 525, 50]
for i in numbers:
    if i%2==0:
        print(i,"the number is a even number ")
    if i%2!=0:
        print(i,"the number is a odd number ")
        
output:
12 the number is a even number 
75 the number is a odd number 
150 the number is a even number 
180 the number is a even number 
145 the number is a odd number 
525 the number is a odd number 
50 the number is a even number

Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.
Q24. Ans - 
num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))
num3 = float(input("Enter third number: "))

if (num1 >= num2) and (num1 >= num3):
   largest = num1
elif (num2 >= num1) and (num2 >= num3):
   largest = num2
else:
   largest = num3

print("The largest number is", largest)

output:
Enter first number: 4.7
Enter second number: 1
Enter third number: 2
The largest number is 4.7

Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]

Q25. Ans -
numbers = [12, 75, 150, 180, 145, 525, 50]
for i in numbers:
    if i>=150:
        continue
    elif i>500:
        break
    elif i%5==0:
        print(i)
        
output:
75
145
50


Q26. What is a string? How can we declare string in Python?
Q26 ANS -
A string is a series of characters. In Python, anything inside quotes is a string. And you can use either single or double quotes.
For example: message = 'This is a string in Python' message = "This is also a string"

Q27. How can we access the string using its index?
Q27 ANS -
String Indexing

Individual characters in a string can be accessed by specifying the string name followed by a number in square brackets ( [] ).
String indexing in Python is zero-based: the first character in the string has index 0 , the next has index 1 , and so on.
For example: # if you want to find r from "karan":
name = "karan"
print(name[2])
output:
r

Q28. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "iNeuron"
```
Q28 ANS -
string = "Big Data iNeuron"
print(string[9:])
output:
iNeuron

Q29. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "norueNi"
```
Q29 ANS - 
string = "Big Data iNeuron"
print(string[:-8:-1])
output:
norueNi

Q30. Resverse the string given in the above question.
Q30 ANS -
string = "Big Data iNeuron"
print(string[::-1])
output:
norueNi ataD giB

Q31. How can you delete entire string at once?
Q31 ANS -
string = "Big Data iNeuron"
del string
print(string)
output:
NameError: name 'string' is not defined

Q32. What is escape sequence?
Q32 ANS -
An escape sequence is a sequence of characters that, when used inside a character or string,
does not represent itself but is converted into another character or series of characters.
So escape sequences are formed using two things: the first is a backslash (\\),
and the second is the set of one or more characters following that backslash (\\).

List of Escape Sequence Available in Python
Escape Sequence	Meaning
\’	Single quote
\\’	Double quote
\\	Backslash
\n	Newline
\r	Carriage Return
\t	Horizontal Tab
\b	Backspace
\f	Formfeed
\v	Vertical Tab
\0	Null Character
\N{Name}	Unicode character Database named lookup
\uxxxxxxxx	Unicode character with a 16-bit hex value
\Uxxxxxxxx	Unicode character with a 32-bit hex value
\000	Character with octal value ooo
\xhh	Character with hex value hh


Q33. How can you print the below string?
```
'iNeuron's Big Data Course'
```
Q33 ANS -
print('iNeuron's Big Data Course')
output:
iNeuron's Big Data Course

Q34. What is a list in Python?
Q34 ANS -
List
Lists are used to store multiple items in a single variable.

Lists are one of 4 built-in data types in Python used to store collections of data,
the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.
For example:
mylist = ["apple", "banana", "cherry"]

Q35. How can you create a list in Python?
Q35 ANS - 
In Python, a list is created by placing elements inside square brackets [] , separated by commas.
A list can have any number of items and they may be of different types (integer, float, string, etc.).
A list can also have another list as an item. This is called a nested list.
#here is a example of list:
mylist = ["apple", "banana", "cherry"]

Q36. How can we access the elements in a list?
Q36 ANS - #this is how we can access elements in a list -
list1 = ['physics', 'chemistry', 1997, 2000];
list2 = [1, 2, 3, 4, 5, 6, 7 ];
print (list1[0])
print (list2[1:5])
output:
physics
[2, 3, 4, 5]


Q37. Write a code to access the word "iNeuron" from the given list.
```
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
``` 
Q37 ANS - #this is how we can access the word "iNeuron"
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
print(lst[4][2])
output:
iNeuron

Q38. Take a list as an input from the user and find the length of the list.
Q38 ANS - #this is how we can  Take a list as an input from the user and find the length of the list.
fruits = str(input("please enter your favourite fruit's name - ")).split(",")
print(fruits)
print(len(fruits))
ouput:
please enter your favourite fruit's name - mango, banana, pineapple
['mango', ' banana', ' pineapple']
3

Q39. Add the word "Big" in the 3rd index of the given list.
```
lst = ["Welcome", "to", "Data", "course"]
```
Q39 ANS - #this is how we can Add the word "Big" in the 3rd index of the given list.
lst = ["Welcome", "to", "Data", "course"]
lst.insert(2,"Big")
print(lst)
output:
['Welcome', 'to', 'Big', 'Data', 'course']

Q40. What is a tuple? How is it different from list?
Q40 - ANS
The key difference between tuples and lists is that while tuples are immutable objects, lists are mutable.
This means tuples cannot be changed while lists can be modified.
Tuples are also more memory efficient than the lists.

Q41. How can you create a tuple in Python?
Q41 ANS -
A tuple in Python can be created by enclosing all the comma-separated elements inside the parenthesis ().
Elements of the tuple are immutable and ordered. It allows duplicate values and can have any number of elements.
You can even create an empty tuple.
#this is how we can create a tuple -
tup1 = ("python", "SQL")
print(tup1)
output:
('python', 'SQL')

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
Q42 ANS -
iv'e tried and i got error, because tuples are imutable in change this is why we are unable to assign a valur in tuple.
we cannot assign as value in empty tuple, it's only get's printed when we have entered the value in an tuple.

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?
Q43 ANS - 
What happens when you add two tuples?
tuple is immutable, but you can concatenate multiple tuples with the + operator. At this time,
the original object remains unchanged, and a new object is generated. Only tuples can be concatenated.
It cannot be concatenated with other types such as list.
#code
a = ("apple")
b = ("ball")
print(a,b)
output:
apple ball

Q44. Take a tuple as an input and print the count of elements in it.
Q44 ANS - #input = karan singh rajpurohit
name = str(input("please enter your name - "))
print("the lenghth of name is - ",len(name))
output:
please enter your name - karan singh rajpurohit
the lenghth of name is -  22

Q45. What are sets in Python?
Q45 ANS -
Sets are used to store multiple items in a single variable.
Set is one of 4 built-in data types in Python used to store collections of data,
the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.
A set is a collection which is unordered, unchangeable*, and unindexed.
A Set is an unordered collection data type that is iterable, mutable and has no duplicate elements.

Q46. How can you create a set?
Q46 ANS - 
#code:
x = set(("apple", "banana", "cherry", "apple"))
print(x)
output:
"apple", "banana", "cherry"

Q47. Create a set and add "iNeuron" in your set.

Q48. Try to add multiple values using add() function.

Q49. How is update() different from add()?

Q50. What is clear() in sets?

Q51. What is frozen set?

Q52. How is frozen set different from set?

Q53. What is union() in sets? Explain via code.

Q54. What is intersection() in sets? Explain via code.

Q55. What is dictionary ibn Python?

Q56. How is dictionary different from all other data structures.

Q57. How can we delare a dictionary in Python?

Q58. What will the output of the following?
```
var = {}
print(type(var))
```

Q59. How can we add an element in a dictionary?

Q60. Create a dictionary and access all the values in that dictionary.

Q61. Create a nested dictionary and access all the element in the inner dictionary.

Q62. What is the use of get() function?

Q63. What is the use of items() function?

Q64. What is the use of pop() function?

Q65. What is the use of popitems() function?

Q66. What is the use of keys() function?

Q67. What is the use of values() function?

Q68. What are loops in Python?

Q69. How many type of loop are there in Python?

Q70. What is the difference between for and while loops?

Q71. What is the use of continue statement?

Q72. What is the use of break statement?

Q73. What is the use of pass statement?

Q74. What is the use of range() function?

Q75. How can you loop over a dictionary?


### Coding problems
Q76. Write a Python program to find the factorial of a given number.

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (P*R*T)/100

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.

Q79. Write a Python program to check if a number is prime or not.

Q80. Write a Python program to check Armstrong Number.

Q81. Write a Python program to find the n-th Fibonacci Number.

Q82. Write a Python program to interchange the first and last element in a list.

Q83. Write a Python program to swap two elements in a list.

Q84. Write a Python program to find N largest element from a list.

Q85. Write a Python program to find cumulative sum of a list.

Q86. Write a Python program to check if a string is palindrome or not.

Q87. Write a Python program to remove i'th element from a string.

Q88. Write a Python program to check if a substring is present in a given string.

Q89. Write a Python program to find words which are greater than given length k.

Q90. Write a Python program to extract unquire dictionary values.

Q91. Write a Python program to merge two dictionary.

Q92. Write a Python program to convert a list of tuples into dictionary.
```
Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}
```

Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.
```
Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]
```

Q94. Write a Python program to get all combinations of 2 tuples.
```
Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]
```

Q95. Write a Python program to sort a list of tuples by second item.
```
Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]
```

Q96. Write a python program to print below pattern.
```
* 
* * 
* * * 
* * * * 
* * * * * 
```
Q97. Write a python program to print below pattern.
```
    *
   **
  ***
 ****
*****
```

Q98. Write a python program to print below pattern.
```
    * 
   * * 
  * * * 
 * * * * 
* * * * * 
```

Q99. Write a python program to print below pattern.
```
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
```

Q100. Write a python program to print below pattern.
```
A 
B B 
C C C 
D D D D 
E E E E E 
```
